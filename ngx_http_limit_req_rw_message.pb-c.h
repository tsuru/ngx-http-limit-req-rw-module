/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ngx_http_limit_req_rw_message.proto */

#ifndef PROTOBUF_C_ngx_5fhttp_5flimit_5freq_5frw_5fmessage_2eproto__INCLUDED
#define PROTOBUF_C_ngx_5fhttp_5flimit_5freq_5frw_5fmessage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif


typedef struct RateLimitValues RateLimitValues;
typedef struct RateLimitZone RateLimitZone;


/* --- enums --- */


/* --- messages --- */

struct  RateLimitValues
{
  ProtobufCMessage base;
  ProtobufCBinaryData key;
  uint64_t excess;
  uint64_t last;
};
#define RATE_LIMIT_VALUES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rate_limit_values__descriptor) \
, {0,NULL}, 0, 0 }


struct  RateLimitZone
{
  ProtobufCMessage base;
  size_t n_ratelimits;
  RateLimitValues **ratelimits;
};
#define RATE_LIMIT_ZONE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rate_limit_zone__descriptor) \
, 0,NULL }


/* RateLimitValues methods */
void   rate_limit_values__init
                     (RateLimitValues         *message);
size_t rate_limit_values__get_packed_size
                     (const RateLimitValues   *message);
size_t rate_limit_values__pack
                     (const RateLimitValues   *message,
                      uint8_t             *out);
size_t rate_limit_values__pack_to_buffer
                     (const RateLimitValues   *message,
                      ProtobufCBuffer     *buffer);
RateLimitValues *
       rate_limit_values__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rate_limit_values__free_unpacked
                     (RateLimitValues *message,
                      ProtobufCAllocator *allocator);
/* RateLimitZone methods */
void   rate_limit_zone__init
                     (RateLimitZone         *message);
size_t rate_limit_zone__get_packed_size
                     (const RateLimitZone   *message);
size_t rate_limit_zone__pack
                     (const RateLimitZone   *message,
                      uint8_t             *out);
size_t rate_limit_zone__pack_to_buffer
                     (const RateLimitZone   *message,
                      ProtobufCBuffer     *buffer);
RateLimitZone *
       rate_limit_zone__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rate_limit_zone__free_unpacked
                     (RateLimitZone *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*RateLimitValues_Closure)
                 (const RateLimitValues *message,
                  void *closure_data);
typedef void (*RateLimitZone_Closure)
                 (const RateLimitZone *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor rate_limit_values__descriptor;
extern const ProtobufCMessageDescriptor rate_limit_zone__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ngx_5fhttp_5flimit_5freq_5frw_5fmessage_2eproto__INCLUDED */
